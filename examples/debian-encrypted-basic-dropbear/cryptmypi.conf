###############################################################################
## cryptmypi profile ##########################################################


# EXAMPLE OF A ENCRYPTED Debian CONFIGURATION
#   Will create an encrypted Debian system:
#   - during boot the encryption password will be prompted both
#       via the console and ssh on port 2222
#   - with ssh server (available after boot)
#       The id_rsa.pub public key will be added to authorized_keys
#
#   Some optional hooks are defined on stage2:
#   - "optional-sys-rootpassword" that sets root password


# General settings ------------------------------------------------------------
# You need to choose a kernel compatible with your RPi version for Debian.
# See: https://salsa.debian.org/raspi-team/image-specs/-/issues/35
#   - Raspberry families 0 and 1 require "armel" architecture, which is
#     strongly underperforming for family 2, where "armhf" can be used.
#   - Families 3 and 4 could use the same image as they are both "arm64"
export _KERNEL_VERSION_FILTER="arm64"

# HOSTNAME
#   Each element of the hostname must be from 1 to 63 characters long and
#   the entire hostname, including the dots, can be at most 253
#   characters long.  Valid characters for hostnames are ASCII(7) letters
#   from a to z, the digits from 0 to 9, and the hyphen (-)
export _HOSTNAME="debian-encrypted-basic-dropbear"

# BLOCK DEVICE
#   The SD card or USD SD card reader block device
#   - USB drives will show up as the normal /dev/sdb, /dev/sdc, etc.
#   - MMC/SDcards may show up the same way if the card reader is USB-connected.
#   - Internal card readers normally show up as /dev/mmcblk0, /dev/mmcblk1, ...
#   You can use the lsblk command to get an easy quick view of all block
#   devices on your system at a given moment.
export _BLKDEV="/dev/sdb"


# LUKS ENCRYPTION -------------------------------------------------------------
## Encryption Cypher
export _LUKSCIPHER="aes-cbc-essiv:sha256"

## Encryption Password
export _LUKSPASSWD="luks_password"

## Stage2 regenerate luks uuid
# A value of yes generates a new luks uuid for deployment
export _NEWLUKSUUID="no"

## Encryption Extra
# On rpi0-1-2-3 you may want to reduce the required memory to unlock
#  _LUKSEXTRA="--pbkdf-memory 131072"
export _LUKSEXTRA=""


# LINUX IMAGE FILE ------------------------------------------------------------
export _IMAGEURL=https://raspi.debian.net/verified/20210823_raspi_4_bullseye.img.xz
export _IMAGESHA="6352e6e1aa348b4069e5205cb023c9db1871e29d9fb39d562237d8b29d208217"


# PACKAGE ACTIONS -------------------------------------------------------------
export _PKGSPURGE=""
export _PKGSINSTALL="tree htop"


# MINIMAL SSH CONFIG ----------------------------------------------------------
#   Keyfile to be used to access the system remotely through ssh.
#   Its public key will be added to the system's root .ssh/authorized_keys
export _SSH_LOCAL_KEYFILE="$_USER_HOME/.ssh/id_rsa"


###############################################################################
## Stage 1 Settings ###########################################################

# Custom Stage1 Profile
#   Check functions/stage1profiles.fns for reference. You may instruct hooks
#   here or you may call one predefined stage1profile functions.
# Optional: if stage1_hooks function is not defined, a prompt will be displayed
stage1_hooks(){
    stage1profile_complete
}


#   Optional function: can be omitted.
#stage1_optional_hooks(){
#    myhooks "experimental-initramfs-wifi"
#}

# DNS settings ----------------------------------------------------------------
#   Sets DNS servers to be used by the system
# Hooks
#   preconditions-dns
#   optional-sys-dns
#   optional-initramfs-sshhub
#   experimental-initramfs-wifi
#   optional-sys-wifi

# Optional variable (default: "1.1.1.1")
#export _DNS1='1.1.1.1'

# Optional variable (default: "8.8.8.8")
#export _DNS2='8.8.8.8'


# WIFI settings ---------------------------------------------------------------
# Hooks
#   optional-initramfs-wifi
#       Attempts to set wifi up at initramfs, so one can wirelessly expose
#       dropbear's LUKS unlocking mechanism (without ethernet).
#   optional-sys-wifi
#       Attempts to pre-configure system wifi.

## SSID the network name
#export _WIFI_SSID='SKYNET'

## Wifi network password
#export _WIFI_PASS='helloworld'

## Wifi
#export _WIFI_INTERFACE='wlan0'

## Kernel IP param
#     This parameter tells the kernel how to configure IP addresses of devices
#     and also how to set up the IP routing table. If this parameter is missing
#     from the kernel command line, all fields are assumed to be empty, and the
#     defaults mentioned below apply. In general this means that the kernel
#     tries to configure everything using autoconfiguration.
#
#            ip=<client-ip>:<server-ip>:<gw-ip>:<netmask>:
#                <hostname>:<device>:<autoconf>:<dns0-ip>:<dns1-ip>
#
#     For more info, check
#         https://www.kernel.org/doc/Documentation/filesystems/nfs/nfsroot.txt
# Optional variable (default: ':::::${_INITRAMFS_WIFI_INTERFACE}:dhcp:${_DNS1}:${_DNS2}:')
#export _INITRAMFS_WIFI_IP=":::::${_INITRAMFS_WIFI_INTERFACE}:dhcp:${_DNS1}:${_DNS2}"

## Modules to load at the initramfs, add your wifi firmware and drivers here
#     For reference, each Raspberry PI version's default wifi chipset:
#     - RPi0W     bcm43438 ou bcm43430a¹
#     - RPi3b     bcm43430a¹
#     - RPi3b+    bcm43455c0
# Optional variable (default:'brcmfmac brcmutil cfg80211 rfkill')
#export _INITRAMFS_WIFI_DRIVERS='brcmfmac brcmutil cfg80211 rfkill'


###############################################################################
## Stage-2 Settings ###########################################################


# Optional stage 2 hooks
#   If declared, this function is called during stage2 build by the
#   stage2-runoptional hook.
#
#   Optional function: can be omitted.
stage2_optional_hooks(){
    myhooks "optional-sys-rootpassword"
    #myhooks "optional-sys-wifi"
}


###############################################################################
##Optional Hook Settings #####################################################


# ROOT PASSWORD CHANGER settings ----------------------------------------------
# Hooks
#   optional-sys-rootpassword
#       Changes the system root password

## The new root password
export _ROOTPASSWD="root_password"
