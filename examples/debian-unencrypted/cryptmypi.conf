###############################################################################
## cryptmypi profile ##########################################################


# EXAMPLE OF A SIMPLE UNENCRYPTED Debian CONFIGURATION for rpi
#   Will create a no-encrypted Debian system, accessible locally through ssh
#   An optional hook on stage2 will configure the system root user password


# General settings ------------------------------------------------------------
# You need to choose a kernel compatible with your RPi version for Debian.
# See: https://salsa.debian.org/raspi-team/image-specs/-/issues/35
#   - Raspberry families 0 and 1 require "armel" architecture, which is
#     strongly underperforming for family 2, where "armhf" can be used.
#   - Families 3 and 4 could use the same image as they are both "arm64"
export _KERNEL_VERSION_FILTER="arm64"


# HOSTNAME
#   Each element of the hostname must be from 1 to 63 characters long and
#   the entire hostname, including the dots, can be at most 253
#   characters long.  Valid characters for hostnames are ASCII(7) letters
#   from a to z, the digits from 0 to 9, and the hyphen (-)
export _HOSTNAME="debian-unencrypted"


# BLOCK DEVICE
#   The SD card or USD SD card reader block device
#   - USB drives will show up as the normal /dev/sdb, /dev/sdc, etc.
#   - MMC/SDcards may show up the same way if the card reader is USB-connected.
#   - Internal card readers normally show up as /dev/mmcblk0, /dev/mmcblk1, ...
#   You can use the lsblk command to get an easy quick view of all block
#   devices on your system at a given moment.
export _BLKDEV="/dev/sdb"


# LINUX IMAGE FILE ------------------------------------------------------------
export _IMAGEURL=https://raspi.debian.net/verified/20210823_raspi_4_bullseye.img.xz
export _IMAGESHA="6352e6e1aa348b4069e5205cb023c9db1871e29d9fb39d562237d8b29d208217"


# MINIMAL SSH CONFIG ----------------------------------------------------------
#   Keyfile to be used to access the system remotely through ssh.
#   Its public key will be added to the system's root .ssh/authorized_keys
export _SSH_LOCAL_KEYFILE="$_USER_HOME/.ssh/id_rsa"


###############################################################################
## Stage 1 Settings ###########################################################

# Custom Stage1 Profile
#   Check functions/stage1profiles.fns for reference. You may instruct hooks
#   here or you may call one predefined stage1profile functions.
#   Optional function:
#   - if stage1_hooks is not defined, you will be prompted
#   - declare it if you want to skip script prompt predefining it
stage1_hooks(){
    stage1profile_noencryption
}

###############################################################################
## Stage-2 Settings ###########################################################

# Optional stage 2 hooks
#   If declared, this function is called during stage2 build by the
#   stage2-runoptional hook.
#
#   Optional function: can be omitted.
stage2_optional_hooks(){
    myhooks "optional-sys-rootpassword"
}


###############################################################################
##Optional Hook Settings #####################################################


# ROOT PASSWORD CHANGER settings ----------------------------------------------
# Hooks
#   optional-sys-rootpassword
#       Changes the system root password

## The new root password
export _ROOTPASSWD="root_password"
